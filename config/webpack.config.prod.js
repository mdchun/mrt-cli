const path = require('path')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const { CleanWebpackPlugin } = require('clean-webpack-plugin')
const Webpack = require('webpack')
const { cwdPath } = require('../lib/util')

module.exports = {
  mode: 'production',
  entry: cwdPath('./src/index.js'),
  output: {
    path: cwdPath('./dist'),
    filename: 'bundle.js',
    libraryTarget: 'umd',
    umdNamedDefine: true
  },

  optimization: {
    minimize: true,
    namedModules: true
  },

  module: {
    rules: [
      // {
      // 	test: /\.jsx?$/,
      // 	loaders: require.resolve('babel-loader')
      // },
      {
        test: /\.(js|jsx|ts|tsx)$/,
        include: cwdPath('./src'),
        use: [
          {
            loader: require.resolve('babel-loader'),
            options: {
              babelrc: false,
              configFile: false,
              cacheDirectory: true,
              cacheCompression: false,
              sourceMaps: false,
              inputSourceMap: false,
              presets: [
                [
                  require.resolve('@babel/preset-env'),
                  {
                    targets: {
                      node: 'current'
                    }
                  }
                ],
                [
                  require.resolve('@babel/preset-react'),
                  {
                    // Will use the native built-in instead of trying to polyfill
                    // behavior for any plugins that require one.
                    useBuiltIns: true
                  }
                ],
                require.resolve('@babel/preset-typescript')
              ],
              plugins: [
                require.resolve('@babel/plugin-proposal-class-properties'),
                [
                  require.resolve('@babel/plugin-transform-runtime'),
                  {
                    absoluteRuntime: false,
                    corejs: false,
                    helpers: true,
                    regenerator: true,
                    useESModules: false
                  }
                ]
              ]
            }
          },
          {
            loader: require.resolve('ts-loader')
          }
        ]
        // exclude: /node_modules/
      },
      {
        loader: require.resolve('ts-css-modules-webpack-loader'),
        options: {
          banner:
            '//This file is automatically generated, please do not change this file!',
          dest: './definitions',
          root: './components'
        },
        exclude: [/node_modules/]
      },
      {
        test: /\.less$/,
        exclude: [/node_modules/],
        use: [
          // require.resolve('style-loader'),
          {
            loader: MiniCssExtractPlugin.loader
            // options: { publicPath: '../../' }
          },
          {
            loader: require.resolve('css-loader'),
            options: {
              importLoaders: 2,
              modules: {
                mode: 'local',
                localIdentName: '[path][name]__[local]--[hash:base64:5]'
              }
            }
          },
          {
            loader: require.resolve('postcss-loader'),
            options: {
              ident: 'postcss',
              plugins: [
                require('postcss-flexbugs-fixes'),
                require('postcss-preset-env')({
                  autoprefixer: {
                    flexbox: 'no-2009'
                  },
                  stage: 3
                })
              ]
            }
          },
          {
            loader: require.resolve('less-loader'),
            options: {
              importLoaders: 2,
              modules: true
            }
          }
        ]
      },
      {
        test: /\.less$/, // 配置除src外的less文件不打开cssModule
        exclude: [/src/],
        use: [
          // { loader: require.resolve('style-loader') },
          {
            loader: MiniCssExtractPlugin.loader
            // options: { publicPath: '../../' }
          },
          {
            loader: require.resolve('css-loader'),
            options: {
              importLoaders: 2
            }
          },
          {
            loader: require.resolve('postcss-loader'),
            options: {
              ident: 'postcss',
              plugins: [
                require('postcss-flexbugs-fixes'),
                require('postcss-preset-env')({
                  autoprefixer: {
                    flexbox: 'no-2009'
                  },
                  stage: 3
                })
              ]
            }
          },
          {
            loader: require.resolve('less-loader'),
            options: {
              modules: true,
              // modifyVars: { '@primary-color': '#1DA57A' },
              javascriptEnabled: true
            }
          }
        ]
      },
      // {
      // 	test: /\.css$/,
      // 	// exclude: /node_modules/,
      // 	loaders: [
      // 		'style-loader',
      // 		{
      // 			loader: 'css-loader',
      // 			options: {
      // 				modules: true
      // 			}
      // 		}
      // 	]
      // },
      {
        //CSS处理
        test: /\.css$/,
        use: [
          {
            loader: MiniCssExtractPlugin.loader
            // options: { publicPath: '../../' }
          },
          {
            loader: require.resolve('css-loader'),
            options: {
              modules: true
            }
          }
        ],
        exclude: /node_modules/
      },

      {
        //antd样式处理
        test: /\.css$/,
        exclude: /src/,
        use: [
          {
            loader: MiniCssExtractPlugin.loader
            // options: { publicPath: '../../' }
          },

          {
            loader: require.resolve('css-loader'),
            options: {
              importLoaders: 1
            }
          }
        ]
      }

      // "file" loader makes sure those assets get served by WebpackDevServer.
      // When you `import` an asset, you get its (virtual) filename.
      // In production, they would get copied to the `build` folder.
      // This loader doesn't use a "test" so it will catch all modules
      // that fall through the other loaders.
      // {
      //   loader: require.resolve('file-loader'),
      //   // Exclude `js` files to keep "css" loader working as it injects
      //   // its runtime that would otherwise be processed through "file" loader.
      //   // Also exclude `html` and `json` extensions so they get processed
      //   // by webpacks internal loaders.
      //   exclude: [/\.(js|mjs|jsx|ts|tsx)$/, /\.less$/, /\.html$/, /\.json$/]
      //   // options: {
      //   //   name: 'static/media/[name].[hash:8].[ext]'
      //   // }
      // }
    ]
  },

  // 摇树
  // optimization: {
  // 	useExports: true
  // },

  resolve: {
    extensions: ['.tsx', '.js', '.jsx', '.css', '.less'],
    modules: ['node_modules']
  },

  plugins: [
    new CleanWebpackPlugin(),
    new HtmlWebpackPlugin({
      inject: true,
      filename: 'index.html',
      template: cwdPath('./public/index.html')
    }),
    new MiniCssExtractPlugin({
      filename: '[name].css',
      chunkFilename: '[name].chunk.css'
    })
    // new Webpack.NamedModulesPlugin()
  ]
}
